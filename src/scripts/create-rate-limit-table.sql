-- Create rate limit table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.rate_limit (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key text NOT NULL UNIQUE,
    count integer DEFAULT 1,
    reset_at timestamp with time zone DEFAULT (timezone('utc'::text, now()) + interval '1 hour'),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now())
);

-- Create index on key for faster lookups
CREATE INDEX IF NOT EXISTS rate_limit_key_idx ON public.rate_limit(key);

-- Enable Row Level Security (RLS)
ALTER TABLE public.rate_limit ENABLE ROW LEVEL SECURITY;

-- Create policy to allow authenticated users to read their own rate limits
CREATE POLICY rate_limit_select_policy ON public.rate_limit
    FOR SELECT
    TO authenticated
    USING (true);

-- Create policy to allow the rate limit function to insert/update records
CREATE POLICY rate_limit_modify_policy ON public.rate_limit
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Grant necessary permissions to the table
GRANT SELECT, INSERT, UPDATE ON public.rate_limit TO authenticated;

-- Grant sequence permissions (using the automatically created sequence name)
DO $$
BEGIN
    -- Grant usage on the sequence if it exists
    IF EXISTS (
        SELECT 1 FROM pg_sequences WHERE schemaname = 'public' AND sequencename = 'rate_limit_id_seq'
    ) THEN
        EXECUTE 'GRANT USAGE ON SEQUENCE public.rate_limit_id_seq TO authenticated';
    END IF;
END
$$;
