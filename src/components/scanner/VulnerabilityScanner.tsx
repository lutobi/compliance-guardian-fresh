'use client'

import React, { useState } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { AlertTriangle, CheckCircle, Loader } from 'lucide-react'

interface ScanResult {
  id: string
  status: 'running' | 'completed' | 'failed'
  progress: number
  findings: {
    critical: number
    high: number
    medium: number
    low: number
  }
}

export function VulnerabilityScanner() {
  const [showNewScan, setShowNewScan] = useState(false)
  const [activeScans, setActiveScans] = useState<ScanResult[]>([])
  const [selectedScan, setSelectedScan] = useState<string | null>(null)

  const handleStartScan = async (e: React.FormEvent) => {
    e.preventDefault()
    const newScan: ScanResult = {
      id: Math.random().toString(36).substr(2, 9),
      status: 'running',
      progress: 0,
      findings: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0
      }
    }
    setActiveScans(prev => [...prev, newScan])
    setShowNewScan(false)

    // Simulate scan progress
    let progress = 0
    const interval = setInterval(() => {
      progress += 5
      if (progress <= 100) {
        setActiveScans(prev =>
          prev.map(scan =>
            scan.id === newScan.id
              ? {
                  ...scan,
                  progress,
                  findings: {
                    critical: Math.floor(Math.random() * 3),
                    high: Math.floor(Math.random() * 5),
                    medium: Math.floor(Math.random() * 8),
                    low: Math.floor(Math.random() * 12)
                  }
                }
              : scan
          )
        )
      } else {
        clearInterval(interval)
        setActiveScans(prev =>
          prev.map(scan =>
            scan.id === newScan.id
              ? { ...scan, status: 'completed' }
              : scan
          )
        )
      }
    }, 1000)
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-end">
        <Button onClick={() => setShowNewScan(true)} disabled={showNewScan}>
          Start New Scan
        </Button>
      </div>

      {showNewScan && (
        <Card className="p-6">
          <form onSubmit={handleStartScan} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="target">Target URL or IP</Label>
              <Input
                id="target"
                placeholder="https://example.com or 192.168.1.1"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="scan-type">Scan Type</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select scan type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="quick">Quick Scan</SelectItem>
                  <SelectItem value="full">Full Scan</SelectItem>
                  <SelectItem value="custom">Custom Scan</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="scope">Scope (Optional)</Label>
              <Textarea
                id="scope"
                placeholder="Enter scope limitations, one per line"
                className="min-h-[100px]"
              />
            </div>

            <div className="pt-4 flex justify-end space-x-2">
              <Button
                variant="outline"
                onClick={() => setShowNewScan(false)}
                type="button"
              >
                Cancel
              </Button>
              <Button type="submit">Start Scan</Button>
            </div>
          </form>
        </Card>
      )}

      <div className="space-y-4">
        {activeScans.map(scan => (
          <Card
            key={scan.id}
            className={`p-6 ${
              selectedScan === scan.id ? 'ring-2 ring-primary' : ''
            }`}
            onClick={() => setSelectedScan(scan.id)}
          >
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  {scan.status === 'running' ? (
                    <Loader className="h-5 w-5 animate-spin text-blue-500" />
                  ) : scan.status === 'completed' ? (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  ) : (
                    <AlertTriangle className="h-5 w-5 text-red-500" />
                  )}
                  <span className="font-medium">Scan #{scan.id}</span>
                </div>
                <Badge
                  variant={
                    scan.status === 'running'
                      ? 'default'
                      : scan.status === 'completed'
                      ? 'success'
                      : 'destructive'
                  }
                >
                  {scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}
                </Badge>
              </div>

              <Progress value={scan.progress} className="h-2" />

              <div className="grid grid-cols-4 gap-4 pt-2">
                <div>
                  <p className="text-sm font-medium text-red-600">Critical</p>
                  <p className="text-2xl font-bold">{scan.findings.critical}</p>
                </div>
                <div>
                  <p className="text-sm font-medium text-orange-600">High</p>
                  <p className="text-2xl font-bold">{scan.findings.high}</p>
                </div>
                <div>
                  <p className="text-sm font-medium text-yellow-600">Medium</p>
                  <p className="text-2xl font-bold">{scan.findings.medium}</p>
                </div>
                <div>
                  <p className="text-sm font-medium text-blue-600">Low</p>
                  <p className="text-2xl font-bold">{scan.findings.low}</p>
                </div>
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  )
}
